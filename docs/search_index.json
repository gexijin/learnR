[["the-game-sales-dataset.html", "Chapter 9 The game sales dataset 9.1 Reading in data and managing the dataset 9.2 Visualization of categorical variables 9.3 Correlation among numeric variables 9.4 Analysis of score and count 9.5 Analysis of sales 9.6 Effect of platform type on principle components 9.7 Models for global sales 9.8 Conclusion", " Chapter 9 The game sales dataset Welcome to the fascinating spectacle of video game sales data, which was heroically downloaded from Kaggle: https://www.kaggle.com/rush4ratio/video-game-sales-with-ratings#Video_Games_Sales_as_at_22_Dec_2016.csv. We will witness the performance of the sales across North America, Europe, Japan, and other regions, which all add up to the global sales. Our dataset is also enchanted with the critic scores, user scores, and the number of brave souls who dared to contribute to these scores. Here’s a brief overview of the dataset’s contents: Name: Name of the game. Platform: Console on which the game is running. Year_of_Release: Year of the game released. Genre: The category of the game. Publisher: The game’s champion and distributor. NA_Sales: Game sales in North America (in millions of units). EU_Sales: Game sales in the European Union (in millions of units). JP_Sales: Game sales in Japan (in millions of units). Other_Sales: Game sales in the rest of the world, i.e. Africa, Asia excluding Japan, Australia, Europe excluding the E.U. and South America (in millions of units). Global_Sales: Total sales in the world (in millions of units). Critic_Score: Aggregate score compiled by Meta critic staff. Critic_Count: The number of critics who’ve lent their voices to the Critic Score. User_Score: Score by Metacritic’s subscribers. User_Count: The number of users who weighed in with their opinions. Developer: Party responsible for creating the game. Rating: The ESRB ratings: E for “Everyone”; E10+ for “Everyone 10+”; T for “Teen”; M for “Mature”; AO for “Adults Only”; RP for “Rating Pending”; and the nostalgic K-A for “kids to adults”. After downloading the data, we transmuted N/A into NA first using Excel and saved it as a .csv file, then read it into R. We banished observations with empty strings of Rating, leaving us with 6825 observations in our “game” dataset. We observed a curious phenomenon: an abundance of sales values dared to be zero. We then transformed the sales into basic units and plus 1 to prepare for the logarithmic transformation (a wizard’s trick to normalize distributions). We also scaled the Critic Scores down by a factor of 10 to harmonize with the User Scores’ scale. 9.1 Reading in data and managing the dataset # Load the dataset tem &lt;- read.csv(&quot;datasets/video-game-sales-at-22-Dec-2016.csv&quot;) tem &lt;- na.omit(tem) # Remove NA # Keep games with ratings game &lt;- subset(tem, Rating != &quot;&quot;) # Convert sales to actual figures by multiplying 1000000 # Plus one to avoid the curse of negative log (sneaky!) sales_columns &lt;- c(&quot;NA_Sales&quot;, &quot;EU_Sales&quot;, &quot;JP_Sales&quot;, &quot;Other_Sales&quot;, &quot;Global_Sales&quot;) game[sales_columns] &lt;- lapply(game[sales_columns], function(x) x * 1000000 + 1) # Harmonizing Critic Scores to match the User Score scale by dividing by 10 game$Critic_Score &lt;- as.numeric(as.character(game$Critic_Score)) / 10 sales_columns &lt;- c(&quot;User_Score&quot;, &quot;Critic_Count&quot;, &quot;User_Count&quot;) game[sales_columns] &lt;- lapply(game[sales_columns], function(x) as.numeric(as.character(x))) # Set category variables as factor variables sales_columns &lt;- c(&quot;Year_of_Release&quot;, &quot;Name&quot;, &quot;Platform&quot;, &quot;Genre&quot;, &quot;Publisher&quot;, &quot;Developer&quot;, &quot;Rating&quot;) game[sales_columns] &lt;- lapply(game[sales_columns], function(x) as.factor(as.character(x))) # Format column names for clarity colnames(game) &lt;- c(&quot;Name&quot;, &quot;Platform&quot;, &quot;Year.Release&quot;, &quot;Genre&quot;, &quot;Publisher&quot;, &quot;NA.Sales&quot;, &quot;EU.Sales&quot;, &quot;JP.Sales&quot;, &quot;Other.Sales&quot;, &quot;Global.Sales&quot;, &quot;Critic.Score&quot;, &quot;Critic.Count&quot;, &quot;User.Score&quot;, &quot;User.Count&quot;, &quot;Developer&quot;, &quot;Rating&quot;) # Display the structure and a summary of the dataset str(game) ## &#39;data.frame&#39;: 6825 obs. of 16 variables: ## $ Name : Factor w/ 4377 levels &quot; Tales of Xillia 2&quot;,..: 4203 2055 4205 2530 4201 2533 2054 4195 1820 4196 ... ## $ Platform : Factor w/ 17 levels &quot;3DS&quot;,&quot;DC&quot;,&quot;DS&quot;,..: 13 13 13 3 13 13 3 13 15 13 ... ## $ Year.Release: Factor w/ 25 levels &quot;1985&quot;,&quot;1988&quot;,..: 15 17 18 15 15 18 14 16 19 18 ... ## $ Genre : Factor w/ 12 levels &quot;Action&quot;,&quot;Adventure&quot;,..: 11 7 11 5 4 5 7 11 4 11 ... ## $ Publisher : Factor w/ 262 levels &quot;10TACLE Studios&quot;,..: 164 164 164 164 164 164 164 164 147 164 ... ## $ NA.Sales : num 41360001 15680001 15610001 11280001 13960001 ... ## $ EU.Sales : num 28960001 12760001 10930001 9140001 9180001 ... ## $ JP.Sales : num 3770001 3790001 3280001 6500001 2930001 ... ## $ Other.Sales : num 8450001 3290001 2950001 2880001 2840001 ... ## $ Global.Sales: num 82530001 35520001 32770001 29800001 28920001 ... ## $ Critic.Score: num 7.6 8.2 8 8.9 5.8 8.7 9.1 8 6.1 8 ... ## $ Critic.Count: num 51 73 73 65 41 80 64 63 45 33 ... ## $ User.Score : num 8 8.3 8 8.5 6.6 8.4 8.6 7.7 6.3 7.4 ... ## $ User.Count : num 322 709 192 431 129 594 464 146 106 52 ... ## $ Developer : Factor w/ 1289 levels &quot;10tacle Studios, Fusionsphere Systems&quot;,..: 779 779 779 779 779 779 779 779 468 779 ... ## $ Rating : Factor w/ 7 levels &quot;AO&quot;,&quot;E&quot;,&quot;E10+&quot;,..: 2 2 2 2 2 2 2 2 2 2 ... summary(game) ## Name Platform Year.Release ## LEGO Star Wars II: The Original Trilogy : 8 PS2 :1140 2008 : 592 ## Madden NFL 07 : 8 X360 : 858 2007 : 590 ## Need for Speed: Most Wanted : 8 PS3 : 769 2005 : 562 ## Harry Potter and the Order of the Phoenix: 7 PC : 651 2009 : 550 ## Madden NFL 08 : 7 XB : 565 2006 : 528 ## Need for Speed Carbon : 7 Wii : 479 2003 : 498 ## (Other) :6780 (Other):2363 (Other):3505 ## Genre Publisher NA.Sales ## Action :1630 Electronic Arts : 944 Min. : 1 ## Sports : 943 Ubisoft : 496 1st Qu.: 60001 ## Shooter : 864 Activision : 492 Median : 150001 ## Role-Playing: 712 Sony Computer Entertainment: 316 Mean : 394485 ## Racing : 581 THQ : 307 3rd Qu.: 390001 ## Platform : 403 Nintendo : 291 Max. :41360001 ## (Other) :1692 (Other) :3979 ## EU.Sales JP.Sales Other.Sales Global.Sales ## Min. : 1 Min. : 1 Min. : 1 Min. : 10001 ## 1st Qu.: 20001 1st Qu.: 1 1st Qu.: 10001 1st Qu.: 110001 ## Median : 60001 Median : 1 Median : 20001 Median : 290001 ## Mean : 236090 Mean : 64159 Mean : 82678 Mean : 777591 ## 3rd Qu.: 210001 3rd Qu.: 10001 3rd Qu.: 70001 3rd Qu.: 750001 ## Max. :28960001 Max. :6500001 Max. :10570001 Max. :82530001 ## ## Critic.Score Critic.Count User.Score User.Count ## Min. :1.300 Min. : 3.00 Min. :0.500 Min. : 4.0 ## 1st Qu.:6.200 1st Qu.: 14.00 1st Qu.:6.500 1st Qu.: 11.0 ## Median :7.200 Median : 25.00 Median :7.500 Median : 27.0 ## Mean :7.027 Mean : 28.93 Mean :7.186 Mean : 174.7 ## 3rd Qu.:8.000 3rd Qu.: 39.00 3rd Qu.:8.200 3rd Qu.: 89.0 ## Max. :9.800 Max. :113.00 Max. :9.600 Max. :10665.0 ## ## Developer Rating ## EA Canada : 149 AO : 1 ## EA Sports : 142 E :2082 ## Capcom : 126 E10+: 930 ## Ubisoft : 103 K-A : 1 ## Konami : 95 M :1433 ## Ubisoft Montreal: 87 RP : 1 ## (Other) :6123 T :2377 The summary reveals the existence of games published under the same banner (or name) but across various platforms; PlayStation 2(PS2) is the Goliath among platform; Action claims the throne as the genre of choice; Electronic Arts boasts the highest frequency among publishers; Rating T and E lead the rating pack; The sales data display small minimums, quantiles, and medians but boast heroic maximums, indicating the presence of superstar games; Exceedingly big maximum User Count hints at a cult-like following for certain titles. Our pre-analysis shows that these variables are shy away from normality, notably the sales and score counts. To remedy this, we shall wield the power of logarithms! let’s bind the log-transformed variables with their original counterparts. sales_columns &lt;- c(&quot;NA.Sales&quot;, &quot;EU.Sales&quot;, &quot;JP.Sales&quot;, &quot;Other.Sales&quot;, &quot;Global.Sales&quot;, &quot;Critic.Count&quot;, &quot;User.Count&quot;) game[paste0(sales_columns, &quot;.Log&quot;)] &lt;- lapply(game[sales_columns], function(x) log(x)) Time to conjure histograms and QQ plots for our transformed dataset. # Select numeric columns for visualization name &lt;- colnames(game)[c(11, 13, 17:23)] par(mfrow = c(5, 4)) # Layout in 5 rows and 4 columns # Loop through each numeric variable and create a histogram and a Q-Q plot for (i in 1:length(name)){ sub &lt;- sample(game[name[i]][, 1], 5000) submean &lt;- mean(sub) hist(sub, main = paste(&quot;Hist. of&quot;, name[i], sep = &quot; &quot;), xlab = name[i]) abline(v = submean, col = &quot;blue&quot;, lwd = 1) qqnorm(sub, main = paste(&quot;Q-Q Plot of&quot;, name[i], sep = &quot; &quot;)) qqline(sub) if (i == 1) { s.t &lt;- shapiro.test(sub) } else { s.t &lt;- rbind(s.t, shapiro.test(sub)) } } # Extract the essence of the Shapiro-Wilk test results s.t &lt;- s.t[, 1:2] # Take first two columns of shapiro.test result s.t &lt;- cbind(name, s.t) # Add variable name for the result s.t ## name statistic p.value ## s.t &quot;Critic.Score&quot; 0.9639693 1.389635e-33 ## &quot;User.Score&quot; 0.91264 5.792905e-47 ## &quot;NA.Sales.Log&quot; 0.6453057 6.690699e-73 ## &quot;EU.Sales.Log&quot; 0.7130966 1.341213e-68 ## &quot;JP.Sales.Log&quot; 0.6182021 1.998243e-74 ## &quot;Other.Sales.Log&quot; 0.7065706 4.760769e-69 ## &quot;Global.Sales.Log&quot; 0.9967589 5.960849e-09 ## &quot;Critic.Count.Log&quot; 0.9781523 4.68504e-27 ## &quot;User.Count.Log&quot; 0.9428331 2.886182e-40 The histograms and QQ plots of these original sales are not abnormally distributed, but the log-transformed sales data now resemble much clearer and close to normal distributions, especially the log value of global sales. Even though the Shapiro test, with a p-value less than 0.05, seems to dispel the illusion of normality, it’s nearly a portrait of normality. Perhaps the absentee values are the reason for the abnormality of the raw sales data. Our analytic crystal ball will gaze more intently upon the log of global sales. The histograms and QQ plots also suggest that the two scores and log-transformed counts are doing a tantalizing tango with normal distribution. Despite the Shapiro-Wilk test’s naysaying, we’ll proceed under the assumption that they are normally distributed for our analysis. In this realm of data, there lie intriguing enigmas: the distribution dance of global versus regional sales; the web of relationships between them; the mystical connection between critic and user scores along with their respective counts; and whether these scores and counts cast the most potent spells on sales, or if other arcane elements such as genre, rating, platform, and publisher have a part to play in this grand sales ritual. Now let’s wave our wands for some visual magic! 9.2 Visualization of categorical variables To simplify platform analysis, we regroup platform into a new variable called Platform.type. # Regroup platform into Platform.type categories pc &lt;- c(&quot;PC&quot;) xbox &lt;- c(&quot;X360&quot;, &quot;XB&quot;, &quot;XOne&quot;) nintendo &lt;- c(&quot;Wii&quot;, &quot;WiiU&quot;, &quot;N64&quot;, &quot;GC&quot;, &quot;NES&quot;, &quot;3DS&quot;, &quot;DS&quot;) playstation &lt;- c(&quot;PS&quot;, &quot;PS2&quot;, &quot;PS3&quot;, &quot;PS4&quot;, &quot;PSP&quot;, &quot;PSV&quot;) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union game &lt;- game %&gt;% mutate(Platform.type = case_when( Platform %in% pc ~ &quot;PC&quot;, Platform %in% xbox ~ &quot;Xbox&quot;, Platform %in% nintendo ~ &quot;Nintendo&quot;, Platform %in% playstation ~ &quot;Playstation&quot;, TRUE ~ &quot;Others&quot;)) library(ggplot2) ggplot(game, aes(x = Platform.type)) + geom_bar(fill = &quot;blue&quot;) Figure 9.1: Bar plot of platform type. The bar plot regales us with a tale of platform dominance: Playstation leads the charge, followed by Xbox and Nintendo, with the “Others” trailing behind. The realm of genres is a diverse landscape, but let’s see who really rules the land. dat &lt;- data.frame(table(game$Genre)) dat$fraction &lt;- dat$Freq / sum(dat$Freq) dat &lt;- dat[order(dat$fraction), ] dat$ymax &lt;- cumsum(dat$fraction) dat$ymin &lt;- c(0, head(dat$ymax, n = -1)) names(dat)[1] &lt;- &quot;Genre&quot; ggplot(dat, aes(fill = Genre, ymax = ymax, ymin = ymin, xmax = 4, xmin = 3)) + geom_rect(colour = &quot;grey30&quot;) + # Background color coord_polar(theta = &quot;y&quot;) + # Coordinate system to polar xlim(c(0, 4)) + labs(title = &quot;Ring plot for Genre&quot;, fill = &quot;Genre&quot;) + theme(plot.title = element_text(hjust = 0.5)) The Genre ring plot crowns Action, Sports, and Shooter as the mightiest triumvirate, with Action occupies nearly a quarter of genre kingdom. Combined, these three genres account for more than half the realm. Puzzle, Adventure, and Stratege have relatively less count. Now let’s consolidate the rare ratings AO, RP, and K-A under “Others” due to their sparse data points. # Consolidate Ratings into Rating.type rating &lt;- c(&quot;E&quot;, &quot;T&quot;, &quot;M&quot;, &quot;E10+&quot;) game &lt;- game %&gt;% mutate(Rating.type = ifelse(Rating %in% rating, as.character(Rating), &quot;Others&quot;)) Let’s slice up the ratings pie chart of gamers’ preferred flavors. counts &lt;- sort(table(game$Rating.type), decreasing = TRUE) # Rename the names of counts for detail information names(counts) &lt;- c(&quot;T - Teen&quot;, &quot;E - Everyone&quot;, &quot;M - Mature&quot;, &quot;E10+ - Everyone 10+&quot;, &quot;Others&quot;) pct &lt;- paste(round(counts/sum(counts) * 100), &quot;%&quot;, sep = &quot; &quot;) lbls &lt;- paste(names(counts), &quot;\\n&quot;, pct, sep = &quot; &quot;) # Rating information and percentage pie(counts, labels = lbls, col = rainbow(length(lbls)), main=&quot;Pie Chart of Ratings with sample sizes&quot;) The pie chart reveals that the popular ratings are T, E, M, and E10+, according to the order. While “Others” claims but a sliver of the pie. library(ggmosaic) library(plotly) p &lt;- ggplot(game) + geom_mosaic(aes(x = product(Rating.type), fill = Platform.type), na.rm = TRUE) + labs(x = &quot;Rating Type&quot;, y = &quot;Platform Type&quot;, title=&quot;Mosaic Plot&quot;) + theme(axis.text.y = element_blank()) ggplotly(p) Figure 9.2: Mosaic plot between platform type and rating type. Same as we noticed previously, the mosaic plot reiterates that ‘Others’ is barely visible due to its minuscule size. For all platform and rating combinations, Playstation dominates the platform ratings for all other three different rating types except for Everyone 10 plus. Nintendo captures the heart of the “Everyone 10+” category. It’s the second most popular platform for rating Everyone. Xbox holds steady as the runner-up in Mature and Teenage categories, and holds the third favorite platform for rating Everyone and Everyone 10 plus. In the category of ‘Others’, games rated ‘Everyone’ are the chosen ones. ::: {.exercise #unnamed-chunk-8} Download the game sales dataset and clean the data as previously outlined at the beginning of this chapter. Then, produce a mosaic plot between genre and rating. Briefly interpret your mystical creation. ::: 9.3 Correlation among numeric variables st &lt;- game[, c(11, 13, 17:23)] # Select the numeric variables of interest st &lt;- na.omit(st) library(ellipse) library(corrplot) corMatrix &lt;- cor(as.matrix(st)) # Correlation matrix col &lt;- colorRampPalette(c(&quot;#7F0000&quot;, &quot;red&quot;, &quot;#FF7F00&quot;, &quot;yellow&quot;, &quot;#7FFF7F&quot;, &quot;cyan&quot;, &quot;#007FFF&quot;, &quot;blue&quot;, &quot;#00007F&quot;)) corrplot.mixed(corMatrix, order = &quot;AOE&quot;, lower = &quot;number&quot;, lower.col = &quot;black&quot;, number.cex = .8, upper = &quot;ellipse&quot;, upper.col = col(10), diag = &quot;u&quot;, tl.pos = &quot;lt&quot;, tl.col = &quot;black&quot;) Figure 9.3: Corrplot among numeric variables. With high r-values of 0.75, 0.65, 0.52, and 0.42 between the log-transformed values of Global.Sales and regional sales, We’ll earmark Global.Sales.Log as our target for later romance with other variables. Also, regional sales are positively flirting with one another. User Score is sweet to Critic Score with an r of 0.58. The correlation between User Count log and User Score stays relatively low. plot(hclust(as.dist(1 - cor(as.matrix(st))))) # Hierarchical clustering Figure 9.4: Exercise dendrogram for numeric variables. In this dendrogram, all log values of sales except JP.Sales.Log build one cluster like best friends; Scores, log values of counts, along with JP.Sales form their own clique. In the first cluster, Other.Sales.Log is whispering closest to Global.Sales.Log, followed by NA.Sales.Log, with EU.Sales.Log joining the fray. 9.4 Analysis of score and count library(ggpmisc) # Package for function stat_poly_eq(), adding equations to plots formula &lt;- y ~ x # A scatter plot that reveals the hidden dance between User Score and Critic Score p1 &lt;- ggplot(game, aes(x = User.Score, y = Critic.Score)) + geom_point(aes(color = Platform), alpha = .8) + geom_smooth(method = &#39;lm&#39;, se = FALSE, formula = formula) + # Add regression line theme(legend.position = &quot;none&quot;) + stat_poly_eq(formula = formula, # Add regression equation and R square value eq.with.lhs = &quot;italic(hat(y))~`=`~&quot;, # Add ^ on y aes(label = paste(..eq.label.., ..rr.label.., sep = &quot;*plain(\\&quot;,\\&quot;)~&quot;)), label.x.npc = &quot;left&quot;, label.y.npc = 0.9, # Position of the equation label parse = TRUE) # Output.type as &quot;expression&quot; # Density plot - where scores show off their curves p2 &lt;- ggplot() + geom_density(data = game, aes(x = Critic.Score), color = &quot;darkblue&quot;, fill = &quot;lightblue&quot;) + geom_density(data = game, aes(x = User.Score), color = &quot;darkgreen&quot;, fill = &quot;lightgreen&quot;, alpha=.5) + labs(x = &quot;Critic.Score-blue, User.Score-green&quot;) # Combine the plots for a double feature library(gridExtra) grid.arrange(p1, p2, nrow = 1, ncol = 2) Figure 9.5: Scatter and density plot for critic score and user score. A positive correlation waltzes between Critic.Score and User.Score. It seems the critics are a tough crowd, scoring on average lower than users. t.test(game$Critic.Score, game$User.Score) ## ## Welch Two Sample t-test ## ## data: game$Critic.Score and game$User.Score ## t = -6.5463, df = 13629, p-value = 6.108e-11 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.2058518 -0.1109834 ## sample estimates: ## mean of x mean of y ## 7.027209 7.185626 T-test with a p-value of much less than 0.05 suggests to accept the alternative hypothesis with 95% confidence: the difference between critic and user scores is not by mere chance. The mean critic score prances at 7.03, while the mean user score frolics slightly higher at 7.19. library(hexbin) # For hexagonal wizardry # Binhex plot for Critic Count Log p1 &lt;- ggplot(game, aes(x = Critic.Count.Log, y = Critic.Score)) + stat_binhex() + # Bin 2d plane into hexagons scale_fill_gradientn(colours = c(&quot;black&quot;, &quot;red&quot;), name = &quot;Frequency&quot;) # Adding a custom continuous color palette # Binhex plot for User Count Log p2 &lt;- ggplot(game, aes(x = User.Count.Log, y = User.Score)) + stat_binhex() + scale_fill_gradientn(colours = c(&quot;black&quot;, &quot;red&quot;), name = &quot;Frequency&quot;) # Color legend # Show both hexes side by side grid.arrange(p1, p2, nrow = 1, ncol = 2) Figure 9.6: Binhex plot for critic count and user count. Critic.Score and Critic.Count.Log share a decent correlation, with an r-value of 0.41 noted earlier, though Critic.Count.Log doesn’t have an overall impact on Critic.Score. On the other canvas, User.Score appears to maintain its independence from User.Count.Log. ::: {.exercise #unnamed-chunk-10} Use ggplot2 package to conjure up a scatter plot with a smooth line between Global_Sales and NA_Sales. In plain, mortal language, explain what you find in the plot. ::: ::: {.exercise #unnamed-chunk-11} Employ a density plot to illustrate the relationship among Global_Sales, NA_Sales, EU_Sales, JP_Sales, and Other_Sales. Interpret your plot. ::: 9.5 Analysis of sales With an eclectic collection of plots and analysis, we delve into the intricacies of sales through the prisms of year of release, region, rating, genre, and more. 9.5.1 By Year.Release # Prepare the data Year.Release &lt;- game$Year.Release counts &lt;- data.frame(table(Year.Release)) p &lt;- game %&gt;% select(Year.Release, Global.Sales) %&gt;% group_by(Year.Release) %&gt;% summarise(Total.Sales = sum(Global.Sales)) q &lt;- cbind.data.frame(p, counts[2]) # Add counts to data frame names(q)[3] &lt;- &quot;count&quot; q$count &lt;- as.numeric(q$count) # Plot the data ggplot(q, aes(x = Year.Release, y = Total.Sales, label = q$count)) + geom_col(fill = &quot;green&quot;) + geom_point(y = q$count * 500000, size = 3, shape = 21, fill = &quot;Yellow&quot; ) + geom_text(y = (q$count + 50) * 500000) + # Position of the text: count of games each year theme(axis.text.x = element_text(angle = 90), panel.background = element_rect(fill = &quot;purple&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + scale_x_discrete(&quot;Year of Release&quot;, labels = as.character(Year.Release), breaks = Year.Release) Figure 9.7: Total global sales and games released by year. The histogram of total sales illustrates that before 1996, game sales were akin to a lonely desert, only one game was released for each year. Between 1996 and 2000, like a slow-blooming flower, sales and game releases gradually climbed. After that, we witnessed a gold rush in sales and game releases, peaking in 2008. Following this golden year, both total sales and count of games went downhill. 9.5.2 By Region library(reshape2) game %&gt;% select(Year.Release, NA.Sales.Log, EU.Sales.Log, JP.Sales.Log, Other.Sales.Log, Global.Sales.Log) %&gt;% melt(id.vars = &quot;Year.Release&quot;) %&gt;% # Stacks other columns into &quot;Year.Release&quot; group_by(Year.Release, variable) %&gt;% summarise(total.sales = sum(value)) %&gt;% ggplot(aes(x = Year.Release, y = total.sales, color = variable, group = variable)) + geom_point() + geom_line() + labs(x = &quot;Year Release&quot;, y = &quot;Total Sales Log Value&quot;, color = &quot;Region&quot;) + theme(axis.text.x = element_text(angle = 90), panel.background = element_rect(fill=&quot;pink&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) Figure 9.8: Year wise log global sales by region. The trajectories of log sales in North America, Europe, and Other regions seem to be singing in harmony, while Japan performs its own unique symphony, reaffirming the conclusions drawn from our earlier cluster analysis. 9.5.3 By Rating game$Rating.type &lt;- as.factor(game$Rating.type) x &lt;- game[, c(6:10)] # Sales across different regions matplot(t(x), type = &quot;l&quot;, col = rainbow(5)[game$Rating.type]) legend(&quot;center&quot;, levels(game$Rating.type), fill = rainbow(5), cex = 0.8, pt.cex = 1) text(c(1.2, 2, 3, 3.9, 4.8), 80000000, colnames(x)) Figure 9.9: Sales by rating type. The line graph regales us with the tale of an “E for Everyone” title, predominantly purchased in North America and Europe, soaring to the lofty heights of 80 million in global sales—with North America accounting for half. A quick perusal of the data reveals the star of the show to be “Wii Sports” from 2006. Additionally, Mature games are popular in North America(green), Everyone games(red) have good sales in Europe, while Japan holds a torch for Teen(purple) and Everyone(red) games. The “Other” region samples a medley of ratings, not playing favorites. 9.5.4 By Genre game %&gt;% select(Year.Release, Global.Sales.Log, Genre) %&gt;% group_by(Year.Release, Genre) %&gt;% summarise(Total.Sales.Log = sum(Global.Sales.Log)) %&gt;% ggplot(aes(x = Year.Release, y = Total.Sales.Log, group = Genre, fill = Genre)) + geom_area() + theme(legend.position = &quot;right&quot;, axis.text.x = element_text(angle = 90), panel.background = element_rect(fill = &quot;blue&quot;), panel.grid.major = element_blank(), panel.grid.minor=element_blank()) Figure 9.10: Year wise log global sales by Genre. Behold the tapestry of sales across genres, with 2007-2009 as the golden era—years when the sales towered above 7000 (log value) annually. Action and sports genres have reigned supreme over the two-decade span, while adventure, puzzle, and strategy genres remained relatively niche. 9.5.5 by Score p1 &lt;- ggplot(game, aes(x = Critic.Score, y = Global.Sales.Log)) + geom_point(aes(color = Genre)) + geom_smooth() # Add a regression line p2 &lt;- ggplot(game, aes(x = User.Score, y = Global.Sales.Log)) + geom_point(aes(color = Rating)) + geom_smooth() grid.arrange(p1, p2, nrow = 1, ncol = 2) Figure 9.11: Global sales in relation to critic and user scores. Regardless of Genre and Rating, a positive trend is noticeable between the Critic Score and the logarithm of Global Sales. Especially, when the Critic Score surpasses 9, Global Sales logarithm escalates sharply. In contrast, the logarithm of Global Sales increases at a snail’s pace in response to User Scores. # Abbreviate a particularly lengthy game title game$Name &lt;- gsub(&quot;Brain Age: Train Your Brain in Minutes a Day&quot;, &quot;Brain Age: Train Your Brain&quot;, game$Name) # Analyze and plot the top 20 games by total sales p1 &lt;- game %&gt;% select(Name, User.Score, Critic.Score, Global.Sales) %&gt;% group_by(Name) %&gt;% summarise(Total.Sales = sum(Global.Sales), Avg.User.Score = mean(User.Score), Avg.Critic.Score = mean(Critic.Score)) %&gt;% arrange(desc(Total.Sales)) %&gt;% head(20) # Create a bar chart with accompanying score lines ggplot(p1, aes(x = factor(Name, levels = Name))) + geom_bar(aes(y = Total.Sales/10000000), stat = &quot;identity&quot;, fill = &quot;green&quot;) + geom_line(aes(y = Avg.User.Score, group = 1, colour = &quot;Avg.User.Score&quot;), size = 1.5) + geom_point( aes(y = Avg.User.Score), size = 3, shape = 21, fill = &quot;Yellow&quot; ) + geom_line(aes(y = Avg.Critic.Score, group = 1, colour = &quot;Avg.Critic.Score&quot;), size = 1.5) + geom_point(aes(y = Avg.Critic.Score), size = 3, shape = 21, fill = &quot;white&quot;) + theme(axis.text.x = element_text(angle = 90, size = 8)) + labs(title = &quot;Top Global Sales Games with Scores&quot;, x = &quot;Top-selling games&quot; ) + theme(plot.title = element_text(hjust = 0.5)) Among these 20 top-selling games, the first two games, ‘Wii Sports’ and ‘Grand Theft Auto V’ tower over their competitors in sales. For a majority of games, the average critic scores are higher than the average user scores, echoing the findings of our density plot in Figure 9.5. “Call of Duty” titles, however, seem to be in the users’ bad books, fetching notably lower average user scores compared to other top-selling games. 9.5.6 By Rating &amp; Genre &amp; Critic score # Aggregate and summarize data for plotting p1 &lt;- game %&gt;% select(Rating.type, Global.Sales, Genre, Critic.Score) %&gt;% group_by(Rating.type, Genre) %&gt;% summarise(Total.Sales = sum(Global.Sales) / 10^8, Avg.Score = mean(Critic.Score)) p2 &lt;- p1 %&gt;% group_by(Genre) %&gt;% summarise(Avg.Critic.Score = mean(Avg.Score)) # Create a bar chart with overlaid score lines ggplot() + geom_bar(data = p1, aes(x = Genre, y = Total.Sales, fill = Rating.type), stat = &quot;Identity&quot;, position = &quot;dodge&quot;) + geom_line(data = p2, aes(x = Genre, y = Avg.Critic.Score, group = 1, color = &quot;Avg.Critic.Score&quot;), size = 2) + geom_point(data = p2, aes(x = Genre, y = Avg.Critic.Score, shape = &quot;Avg.Critic.Score&quot;), size = 3, color = &quot;Blue&quot;) + scale_colour_manual(&quot;Score&quot;, breaks = &quot;Avg.Critic.Score&quot;, values = &quot;yellow&quot;) + scale_shape_manual(&quot;Score&quot;, values = 19) + # Add scale for line and point plot theme(axis.text.x = element_text(angle = 90), legend.position = &quot;bottom&quot;, panel.background = element_rect(fill = &quot;black&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) Figure 9.12: Total sales for genre and rating in accordance with critic score. Everyone*sports games are so popular, knocking it out of the sales park, with the critics’ nod of approval. Not to be outdone, ‘Mature’ rated Action and Shooter games follow closely, with a respectable critic score to match. An overlay of average critic scores on the bar chart reveals that Action and Role-Playing games lead the critic scores, while Fighting, adventure, and racing games get relatively lower average critic scores. However, higher critic scores do not always translate to higher sales; for example, Role-Playing games have higher critic scores but do not outsell Action games. Puzzle and strategy do sell less compared with other genres, though their critic scores are above the average. 9.5.7 By Platform library(viridis) library(scales) p &lt;- game %&gt;% group_by(Platform.type, Year.Release) %&gt;% summarise(total = sum(Global.Sales)) p$Year.Release. &lt;- as.numeric(as.character(p$Year.Release)) ggplot(p, aes(x = Year.Release., fill = Platform.type)) + geom_density(position = &quot;fill&quot;) + labs(y = &quot;Market Share&quot;) + scale_fill_viridis(discrete = TRUE) + scale_y_continuous(labels = percent_format()) Figure 9.13: Yearly market share by platform type. It was a lonely landscape for PC and PlayStation before 1990, with PC reigning unchallenged in the gaming kingdom. As the clock ticked past 1995, newcomers Nintendo and Xbox burst onto the scene, hungrily carving out hefty slices of the market pie. Other platforms popped up like mushrooms in the early ’90s, only to vanish into the annals of gaming history after a brief 20-year cameo. Fast forward to 2010, and it’s a four-way dance-off with Nintendo, PC, PlayStation, and Xbox maintaining a harmonious market share equilibrium. # Compute 1-way ANOVA test for log value of global sales by Platform Type model &lt;- aov(Global.Sales.Log ~ Platform.type, data = game) summary(model) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Platform.type 4 1283 320.8 181.2 &lt;2e-16 *** ## Residuals 6820 12077 1.8 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 tukey &lt;- TukeyHSD(model) par(mar = c(4, 10, 2, 1)) plot(tukey, las = 1) The ANOVA test confirms significant sales differences among platform types. Delving deeper, The Tukey post-hoc dance shows everyone stepping on its own toes, indicating notable differences across the board—except for Xbox versus Nintendo, and others versus Nintendo, who seem to be in step with one another, sharing a similar sales rhythm. game$Platform.type &lt;- as.factor(game$Platform.type) ggplot(game, aes(x = Platform.type, y = Global.Sales.Log, fill = Rating.type)) + geom_boxplot() Figure 9.14: Global sales log by platform and rating type. In the global sales log arena, PCs tend to play the underdog. In contrast, PlayStation and Xbox punch above their weight, landing higher median sales across various rating categories. Titles rated ‘Everyone’ seem to be crowd-pleasers on all platforms, while the ‘Mature’ category particularly flourishes on PC, PlayStation, and Xbox. ggplot(game, aes(Critic.Score, Global.Sales.Log, color = Platform.type)) + geom_point() + facet_wrap(~ Genre) Figure 9.15: Global sales log correlated with critic score across different platforms and genres. Most genre plots in Figure 9.15 illustrate a universal truth: there is a positive correlation between Global.Sales.Log and Critic Score, the higher the critic score, the better the global sales log value. Most puzzle games were from Nintendo, while lots of stratege games are PC. For other genres, all platforms are distributed relatively evenly. PC sat in the corner of lower market share in different genres, while Nintendo’s sporty, racing, platform, and misc games, Playstation’s action, fighting, and racing games, Xbox’s misc, action, and shooter games shined with knockout global sales logs. 9.6 Effect of platform type on principle components To examine the influence of various gaming platforms on the variance in game sales, a principal component analysis (PCA) was conducted. When performing a PCA, it’s essential to scale the data, especially if the variables are measured on different scales. st &lt;- game[, c(11, 13, 17:23)] pca &lt;- prcomp(st, scale = T) # Normalization activated with scale = TRUE percentVar &lt;- round(100 * summary(pca)$importance[2, 1:9], 0) # Compute % variances pcaData &lt;- as.data.frame(pca$x[, 1:2]) # Extract 1st and 2nd PC values pcaData &lt;- cbind(pcaData, game$Platform.type) # Add platform type for clustering colnames(pcaData) &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;Platform&quot;) ggplot(pcaData, aes(PC1, PC2, color = Platform, shape = Platform)) + geom_point(size = 0.8) + xlab(paste0(&quot;PC1: &quot;, percentVar[1], &quot;% variance&quot;)) + # x-axis label ylab(paste0(&quot;PC2: &quot;, percentVar[2], &quot;% variance&quot;)) + # y-axis label theme(aspect.ratio = 1) # Width and height ratio Figure 9.16: PCA plot colored by platform type. Each platform—PC, Xbox, Playstation, and Nintendo—claims its territory on the PCA chart, demonstrating a unique role in the variance components of PC1 and PC2, showcasing its distinct influence on the gaming market’s variability. library(ggfortify) set.seed(1) autoplot(kmeans(st, 3), data = st, label = FALSE, label.size = 0.1) Figure 9.17: K-means clustering on PCA components using ggfortify. Linking this with the PCA Figure 9.16, we discover the 4 main actors: Playstation, Xbox, Nintendo, and PC. The first cluster is formed by all these four gaming giants. The second cluster is mostly comprised of Xbox, Nintendo and Playstation, while PC and Playstation dominate the third cluster. 9.7 Models for global sales To manage the complexity of publisher and developer data, and to sidestep collinearity, we’ve streamlined the number of publisher levels to 12, relegating the rest to “Others.” We rely on critic scores over user scores, given their stronger correlation, and utilize the log value of user score count for its better relationship with global sales. Other sales log variables are omitted to avoid redundancy. Here’s how we prepare our data: # Re-categorize publishers into 13 groups Publisher. &lt;- head(names(sort(table(game$Publisher), decreasing = TRUE)), 12) game &lt;- game %&gt;% mutate(Publisher.type = ifelse(Publisher %in% Publisher., as.character(Publisher), &quot;Others&quot;)) game.lm &lt;- game[, c(3:4, 11, 21, 23:26)] # Select relevant columns for linear model Now, let’s build a linear model to understand the factors affecting global sales: model &lt;- lm(Global.Sales.Log ~ ., data = game.lm) summary(model) ## ## Call: ## lm(formula = Global.Sales.Log ~ ., data = game.lm) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.9221 -0.5558 0.0254 0.5789 4.1009 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) 10.187752 0.922104 11.048 ## Year.Release1988 -3.088268 1.300919 -2.374 ## Year.Release1992 -1.796072 1.300851 -1.381 ## Year.Release1994 2.930510 1.302000 2.251 ## Year.Release1996 1.488582 0.987461 1.507 ## Year.Release1997 1.188658 0.955613 1.244 ## Year.Release1998 0.744742 0.939532 0.793 ## Year.Release1999 0.653088 0.936406 0.697 ## Year.Release2000 0.785921 0.925467 0.849 ## Year.Release2001 0.772488 0.922728 0.837 ## Year.Release2002 0.570865 0.922008 0.619 ## Year.Release2003 0.340110 0.921843 0.369 ## Year.Release2004 0.550812 0.921901 0.597 ## Year.Release2005 0.210534 0.921694 0.228 ## Year.Release2006 0.141533 0.921703 0.154 ## Year.Release2007 0.373361 0.921629 0.405 ## Year.Release2008 0.529829 0.921677 0.575 ## Year.Release2009 0.446508 0.921648 0.484 ## Year.Release2010 0.596658 0.921889 0.647 ## Year.Release2011 0.389514 0.921944 0.422 ## Year.Release2012 -0.031458 0.922540 -0.034 ## Year.Release2013 -0.170252 0.922985 -0.184 ## Year.Release2014 -0.383671 0.923096 -0.416 ## Year.Release2015 -0.478979 0.923302 -0.519 ## Year.Release2016 -0.826950 0.923192 -0.896 ## GenreAdventure -0.335989 0.063305 -5.307 ## GenreFighting 0.072835 0.055338 1.316 ## GenreMisc 0.357196 0.054323 6.575 ## GenrePlatform -0.184139 0.054854 -3.357 ## GenrePuzzle -0.345253 0.091582 -3.770 ## GenreRacing -0.097943 0.048451 -2.021 ## GenreRole-Playing -0.357837 0.043093 -8.304 ## GenreShooter -0.142624 0.040372 -3.533 ## GenreSimulation 0.405629 0.060887 6.662 ## GenreSports 0.011217 0.046986 0.239 ## GenreStrategy -0.483702 0.063838 -7.577 ## Critic.Score 0.114744 0.009865 11.632 ## User.Count.Log 0.615776 0.011589 53.134 ## Platform.typeOthers -0.188799 0.066011 -2.860 ## Platform.typePC -2.442802 0.051704 -47.246 ## Platform.typePlaystation 0.135254 0.033868 3.994 ## Platform.typeXbox -0.106733 0.036927 -2.890 ## Rating.typeE10+ -0.058393 0.040759 -1.433 ## Rating.typeM -0.467923 0.045704 -10.238 ## Rating.typeOthers 0.144593 0.545092 0.265 ## Rating.typeT -0.331696 0.035692 -9.293 ## Publisher.typeAtari -0.506235 0.082442 -6.141 ## Publisher.typeCapcom -0.759855 0.078983 -9.620 ## Publisher.typeElectronic Arts -0.114754 0.053315 -2.152 ## Publisher.typeKonami Digital Entertainment -0.705932 0.073042 -9.665 ## Publisher.typeNamco Bandai Games -0.569621 0.074819 -7.613 ## Publisher.typeNintendo 0.111592 0.074409 1.500 ## Publisher.typeOthers -0.618870 0.046433 -13.328 ## Publisher.typeSega -0.517708 0.069222 -7.479 ## Publisher.typeSony Computer Entertainment -0.585506 0.069125 -8.470 ## Publisher.typeTake-Two Interactive -0.276947 0.070848 -3.909 ## Publisher.typeTHQ -0.117032 0.068824 -1.700 ## Publisher.typeUbisoft -0.377192 0.059101 -6.382 ## Pr(&gt;|t|) ## (Intercept) &lt; 2e-16 *** ## Year.Release1988 0.017628 * ## Year.Release1992 0.167420 ## Year.Release1994 0.024432 * ## Year.Release1996 0.131733 ## Year.Release1997 0.213591 ## Year.Release1998 0.427996 ## Year.Release1999 0.485550 ## Year.Release2000 0.395791 ## Year.Release2001 0.402522 ## Year.Release2002 0.535836 ## Year.Release2003 0.712180 ## Year.Release2004 0.550211 ## Year.Release2005 0.819326 ## Year.Release2006 0.877964 ## Year.Release2007 0.685409 ## Year.Release2008 0.565410 ## Year.Release2009 0.628070 ## Year.Release2010 0.517516 ## Year.Release2011 0.672679 ## Year.Release2012 0.972799 ## Year.Release2013 0.853660 ## Year.Release2014 0.677690 ## Year.Release2015 0.603940 ## Year.Release2016 0.370418 ## GenreAdventure 1.15e-07 *** ## GenreFighting 0.188157 ## GenreMisc 5.22e-11 *** ## GenrePlatform 0.000793 *** ## GenrePuzzle 0.000165 *** ## GenreRacing 0.043269 * ## GenreRole-Playing &lt; 2e-16 *** ## GenreShooter 0.000414 *** ## GenreSimulation 2.91e-11 *** ## GenreSports 0.811327 ## GenreStrategy 4.01e-14 *** ## Critic.Score &lt; 2e-16 *** ## User.Count.Log &lt; 2e-16 *** ## Platform.typeOthers 0.004248 ** ## Platform.typePC &lt; 2e-16 *** ## Platform.typePlaystation 6.58e-05 *** ## Platform.typeXbox 0.003859 ** ## Rating.typeE10+ 0.152006 ## Rating.typeM &lt; 2e-16 *** ## Rating.typeOthers 0.790814 ## Rating.typeT &lt; 2e-16 *** ## Publisher.typeAtari 8.69e-10 *** ## Publisher.typeCapcom &lt; 2e-16 *** ## Publisher.typeElectronic Arts 0.031403 * ## Publisher.typeKonami Digital Entertainment &lt; 2e-16 *** ## Publisher.typeNamco Bandai Games 3.04e-14 *** ## Publisher.typeNintendo 0.133735 ## Publisher.typeOthers &lt; 2e-16 *** ## Publisher.typeSega 8.44e-14 *** ## Publisher.typeSony Computer Entertainment &lt; 2e-16 *** ## Publisher.typeTake-Two Interactive 9.36e-05 *** ## Publisher.typeTHQ 0.089092 . ## Publisher.typeUbisoft 1.86e-10 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9177 on 6767 degrees of freedom ## Multiple R-squared: 0.5735, Adjusted R-squared: 0.5699 ## F-statistic: 159.6 on 57 and 6767 DF, p-value: &lt; 2.2e-16 model &lt;- aov(Global.Sales.Log ~ ., data = game.lm) summary(model) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Year.Release 24 521 21.7 25.78 &lt;2e-16 *** ## Genre 11 527 47.9 56.87 &lt;2e-16 *** ## Critic.Score 1 1771 1771.3 2103.34 &lt;2e-16 *** ## User.Count.Log 1 1344 1344.0 1595.92 &lt;2e-16 *** ## Platform.type 4 2944 736.1 874.11 &lt;2e-16 *** ## Rating.type 4 165 41.2 48.93 &lt;2e-16 *** ## Publisher.type 12 389 32.4 38.53 &lt;2e-16 *** ## Residuals 6767 5699 0.8 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The log value of global sales is mostly influenced by factors of critic score, user count log, platform type, Publisher type, and genre in the linear model analysis. ANOVA shows every factor is a key player of significant contributor. Critic.Score and User.Count.Log are the lead actors in this statistical drama. They positively affect the global sales log, while other factors like Platform type and Genre either lift up or pull down the global sales according to their types. This model boasts an explanatory power with an R-Square of 0.57. Given the nonlinear relationship indicated by our previous scatter plot about global sales versus critic scores (Figure 9.11) and the pronounced impact of critic scores in the linear model analysis, a polynomial model is entertained. model &lt;- lm(Global.Sales.Log ~ Critic.Score + I(Critic.Score^2) + I(Critic.Score^3) + I(Critic.Score^4), data = game.lm) summary(model) ## ## Call: ## lm(formula = Global.Sales.Log ~ Critic.Score + I(Critic.Score^2) + ## I(Critic.Score^3) + I(Critic.Score^4), data = game.lm) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.0029 -0.7972 0.0916 0.8801 5.6201 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 12.030638 1.468428 8.193 3.02e-16 *** ## Critic.Score -0.840810 1.095444 -0.768 0.4428 ## I(Critic.Score^2) 0.385671 0.292104 1.320 0.1868 ## I(Critic.Score^3) -0.060971 0.033147 -1.839 0.0659 . ## I(Critic.Score^4) 0.003434 0.001358 2.528 0.0115 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.281 on 6820 degrees of freedom ## Multiple R-squared: 0.1623, Adjusted R-squared: 0.1618 ## F-statistic: 330.4 on 4 and 6820 DF, p-value: &lt; 2.2e-16 We focus on the third and fourth degrees of the polynomial fit as the initial levels lacked statistical significance in our pre-analysis. model &lt;- lm(Global.Sales.Log ~ I(Critic.Score^3) + I(Critic.Score^4), data = game.lm) summary(model) ## ## Call: ## lm(formula = Global.Sales.Log ~ I(Critic.Score^3) + I(Critic.Score^4), ## data = game.lm) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.8634 -0.7892 0.0950 0.8837 5.5807 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.193e+01 7.115e-02 167.722 &lt; 2e-16 *** ## I(Critic.Score^3) -2.989e-03 7.972e-04 -3.749 0.000179 *** ## I(Critic.Score^4) 6.076e-04 8.224e-05 7.387 1.67e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.283 on 6822 degrees of freedom ## Multiple R-squared: 0.1597, Adjusted R-squared: 0.1595 ## F-statistic: 648.3 on 2 and 6822 DF, p-value: &lt; 2.2e-16 The coefficients are statistically significant — the simplified model with critic score to the third and fourth-degree terms, brings the drama with an R-squared of 0.16. Not quite a blockbuster hit, but certainly a critical darling. To illustrate our findings: ModelFunc &lt;- function(x) {model$coefficients[1] + x^3*model$coefficients[2] + x^4*model$coefficients[3]} ggplot(data = game.lm, aes(x = Critic.Score, y = Global.Sales.Log)) + geom_point() + stat_function(fun = ModelFunc, color = &#39;blue&#39;, size = 1) Here is the scatter plot of Global.Sales.Log versus Critic Score, along with the predictive curve based on the polynomial model, which forecasts the global sales log using critic score. ::: {.exercise #unnamed-chunk-20} Visualize the distribution of NA_Sales in relation to Year_of_Release, Genre, Rating, and Platform using different plots, individually or combinedly. Interpret the relationship between NA_Sales with these factors. Hint: Consider applying log transformation to NA_Sales for better interpretability and potentially regroup platforms for a more consolidated view. ::: ::: {.exercise #unnamed-chunk-21} What is the correlation between NA_Sales and Critic_Score? Use scatter plot with smooth trend line or a fitted polynomial curve to show the relationship. Give me your findings. ::: ::: {.exercise #unnamed-chunk-22} Utilize linear modeling and ANOVA to analyze the contributing factors to the variance in NA_Sales. Provide a succinct interpretation of the results. Hint: Keep in mind the correlation patterns among those sales and scores highlighted in Figure 9.3. ::: 9.8 Conclusion While raw global and regional sales figures deviate from normality, their logarithmic counterparts dance closely with it. Patterns in regional sales harmonize with the global chorus. Critic scores and user scores exhibit a sweet correlation, although the former typically trails the latter across most game titles. However, no clear-cut connection emerges between scores and the number of reviews. Together, critic score, log-transformed user score count, genre, rating, platform, and publisher play their parts in the grand drama of log-transformation of global sales, with critic scores taking the star role, and the others in the supporting cast. Curtain call! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
